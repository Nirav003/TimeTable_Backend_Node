openapi: 3.0.3
info:
  title: VPM College Timetable - OpenAPI 3.0
  description: |-
    Timetable app for VPM College
  contact:
    email: jayanth.work.91@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: "Na"
tags:
  - name: A. College Lectures
  - name: B. College Profs
  - name: C. College Classrooms
  - name: D. College Year
  - name: E. College Division
  - name: F. College Stream
  - name: G. College Batches
  - name: H. College Subjects
  - name: I. College Timetable Slots
  - name: English School Timetable  
  - name: Kannada School Timetable
paths:
  /college/lecture:
    post:
      tags:
        - A. College Lectures
      summary: Create an entry for a lecture
      description: Add a new lecture for the given date and time
      operationId: addLecture
      requestBody:
        description: Create a new lecture
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lecture'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lecture'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /college/lectures:
    get:
      tags:
        - A. College Lectures
      summary: Fetch all lectures
      description: Endpoint for fetching all the lectures to display on UI
      operationId: findAllLectures
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lecture'          
        '400':
          description: Invalid status value
  /college/lecture/{lectureId}:
    get:
      tags:
        - A. College Lectures
      summary: Find lecture by ID
      description: Returns a single lecture. For debugging purpose only.
      operationId: getLectureById
      parameters:
        - name: lectureId
          in: path
          description: Unique ID of lecture to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lecture'          
        '404':
          description: Lecture not found
    put:
      tags:
        - A. College Lectures
      summary: Updates a lecture with new information
      description: ''
      operationId: updateLecture
      parameters:
        - name: lectureId
          in: path
          description: Unique ID of lecture to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Create a new lecture
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lecture'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lecture'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    delete:
      tags:
        - A. College Lectures
      summary: Deletes a lecture
      description: delete a lecture
      operationId: deleteLecture
      parameters:
        - name: lectureId
          in: path
          description: lecture id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Invalid pet value
  /college/professor:
    post:
      tags:
        - B. College Profs
      summary: Add new professor info
      description: Add a Professor's information
      operationId: addProfessor
      requestBody:
        description: Professor details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Professor'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /college/professors:
    get:
      tags:
        - B. College Profs 
      summary: Fetch all professors
      description: Fetch a list of all the professors
      operationId: findAllProfessors
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professor'          
  /college/professor/{professorId}:
    get:
      tags:
        - B. College Profs
      summary: Find lecture by ID
      description: Returns a single pet
      operationId: getProfessorById
      parameters:
        - name: professorId
          in: path
          description: ID of professor to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    put:
      tags:
        - B. College Profs
      summary: Updates a lecture with new information
      description: ''
      operationId: updateProfessorInfo
      parameters:
        - name: professorId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
    delete:
      tags:
        - B. College Profs
      summary: Deletes a professor
      description: delete a professor
      operationId: deleteProfessor
      parameters:
        - name: professorId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value    
  /college/classroom:
    post:
      tags:
        - C. College Classrooms
      summary: Add new professor info
      description: Add a new lecture for the given date and time
      operationId: addClassroom
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Classroom'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classroom'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /college/classrooms:
    get:
      tags:
        - C. College Classrooms 
      summary: Fetch all professors
      operationId: findAllClassrooms
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Classroom'          
        '400':
          description: Invalid status value
  /college/classroom/{classroomId}:
    get:
      tags:
        - C. College Classrooms
      summary: Find lecture by ID
      description: Returns a single pet
      operationId: getClassroomById
      parameters:
        - name: classroomId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classroom'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    put:
      tags:
        - C. College Classrooms
      summary: Updates a lecture with new information
      description: ''
      operationId: updateClassroomInfo
      parameters:
        - name: classroomId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
    delete:
      tags:
        - C. College Classrooms
      summary: Deletes a professor
      description: delete a professor
      operationId: deleteClassroom
      parameters:
        - name: classroomId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
  /college/year:
    post:
      tags:
        - D. College Year
      summary: Add new professor info
      description: Add a new lecture for the given date and time
      operationId: addYear
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Year'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Year'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /college/years:
    get:
      tags:
        - D. College Year
      summary: Fetch all professors
      operationId: findAllYears
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Year'          
        '400':
          description: Invalid status value
  /college/year/{yearId}:
    get:
      tags:
        - D. College Year
      summary: Find lecture by ID
      description: Returns a single pet
      operationId: getYearById
      parameters:
        - name: yearId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Year'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    put:
      tags:
        - D. College Year
      summary: Updates a lecture with new information
      description: ''
      operationId: updateYearInfo
      parameters:
        - name: yearId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
    delete:
      tags:
        - D. College Year
      summary: Deletes a professor
      description: delete a professor
      operationId: deleteYear
      parameters:
        - name: yearId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
  /college/division:
    post:
      tags:
        - E. College Division
      summary: Add new professor info
      description: Add a new lecture for the given date and time
      operationId: addDivision
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Division'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Division'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /college/divisions:
    get:
      tags:
        - E. College Division
      summary: Fetch all professors
      operationId: findAllDivisions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Division'          
        '400':
          description: Invalid status value
  /college/division/{divisionId}:
    get:
      tags:
        - E. College Division
      summary: Find lecture by ID
      description: Returns a single pet
      operationId: getDivisionById
      parameters:
        - name: divisionId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Division'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    put:
      tags:
        - E. College Division
      summary: Updates a lecture with new information
      description: ''
      operationId: updateDivisionInfo
      parameters:
        - name: divisionId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
    delete:
      tags:
        - E. College Division
      summary: Deletes a professor
      description: delete a professor
      operationId: deleteDivision
      parameters:
        - name: divisionId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
  /college/stream:
    post:
      tags:
        - F. College Stream
      summary: Add new professor info
      description: Add a new lecture for the given date and time
      operationId: addStream
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /college/streams:
    get:
      tags:
        - F. College Stream
      summary: Fetch all streams
      operationId: findAllStreams
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stream'          
        '400':
          description: Invalid status value
  /college/stream/{streamId}:
    get:
      tags:
        - F. College Stream
      summary: Find lecture by ID
      description: Returns a single pet
      operationId: getStreamById
      parameters:
        - name: streamId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    put:
      tags:
        - F. College Stream
      summary: Updates a lecture with new information
      description: ''
      operationId: updateStreamInfo
      parameters:
        - name: streamId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
    delete:
      tags:
        - F. College Stream
      summary: Deletes a professor
      description: delete a professor
      operationId: deleteStream
      parameters:
        - name: streamId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
  /college/batch:
    post:
      tags:
        - G. College Batches
      summary: Add new batch info
      description: Add a new lecture for the given date and time
      operationId: addBatch
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Batch'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /college/batches:
    get:
      tags:
        - G. College Batches
      summary: Fetch all batches
      operationId: findAllBatches
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Batch'          
        '400':
          description: Invalid status value
  /college/batch/{batchId}:
    get:
      tags:
        - G. College Batches
      summary: Find lecture by ID
      description: Returns a single batch
      operationId: getBatchById
      parameters:
        - name: batchId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    put:
      tags:
        - G. College Batches
      summary: Updates a batch with new information
      description: ''
      operationId: updateBatchInfo
      parameters:
        - name: batchId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
    delete:
      tags:
        - G. College Batches
      summary: Deletes a professor
      description: delete a professor
      operationId: deleteBatch
      parameters:
        - name: batchId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
  /college/subject:
    post:
      tags:
        - H. College Subjects
      summary: Add new batch info
      description: Add a new lecture for the given date and time
      operationId: addSubject
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /college/subjects:
    get:
      tags:
        - H. College Subjects
      summary: Fetch all batches
      operationId: findAllSubjects
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'          
        '400':
          description: Invalid status value
  /college/subject/{batchId}:
    get:
      tags:
        - H. College Subjects
      summary: Find lecture by ID
      description: Returns a single batch
      operationId: getSubjectById
      parameters:
        - name: batchId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    put:
      tags:
        - H. College Subjects
      summary: Updates a batch with new information
      description: ''
      operationId: updateSubjectInfo
      parameters:
        - name: batchId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
    delete:
      tags:
        - H. College Subjects
      summary: Deletes a subject
      description: delete a professor
      operationId: deleteSubject
      parameters:
        - name: batchId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
  /college/timetable-slot:
    post:
      tags:
        - I. College Timetable Slots
      summary: Add new timetable slot info
      description: Add a new lecture for the given date and time
      operationId: addSlots
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Slot'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /college/timetable-slots:
    get:
      tags:
        - I. College Timetable Slots
      summary: Fetch all batches
      operationId: findAllSlots
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Slot'          
        '400':
          description: Invalid status value
  /college/timetable-slot/{slotId}:
    get:
      tags:
        - I. College Timetable Slots
      summary: Find lecture by ID
      description: Returns a single batch
      operationId: getSlotById
      parameters:
        - name: slotId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    put:
      tags:
        - I. College Timetable Slots
      summary: Updates a batch with new information
      description: ''
      operationId: updateSlotInfo
      parameters:
        - name: slotId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
    delete:
      tags:
        - I. College Timetable Slots
      summary: Deletes a subject
      description: delete a professor
      operationId: deleteSlot
      parameters:
        - name: slotId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value

components:
  schemas:
    Calendar:
      type: object
      properties:
        id:
          type: integer
          format: int64
        day:
          type: string
          example: "Monday"
        date:  
          type: integer
          example: 12
        month:
          type: string
          example: "01 - January"
        year:
          type: integer
          example: 1991
    Slot:
      type: object
      properties:
        id: 
          type: string
          example: " uuid"
        slot:
          type: integer
          example: 1
    Lecture:
      type: object
      properties:
        id: 
          type: string
          example: " uuid"
        subject:
          $ref: '#/components/schemas/Subject'
        calendar:
          $ref: '#/components/schemas/Calendar'
        classroom:
          $ref: '#/components/schemas/Classroom'
        professor:
          $ref: '#/components/schemas/Professor'
        slot:
          $ref: '#/components/schemas/Slot'
        batch:
          $ref: '#/components/schemas/Batch'
        division:
          $ref: '#/components/schemas/Division'
    Professor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
        designation:
          type: string
        emailId:
          type: string
        phoneNumber:
          type: integer
    Subject:
      type: object
      properties:
        id:
          type: string
          example: "uuid"
        name:
          type: string
          example: "name of subject"
        stream:
          type: array
          items:
            $ref: '#/components/schemas/Stream'
    Classroom:
      type: object
      properties:
        id:
          type: string
          example: 1
        floor:
          type: integer
          example: 1
        room_no:
          type: integer
          example: 101
    Year:
      type: object
      properties:
        id:
          type: string
          example: "some uuid"
        year:
          type: string
          example: "FY" 
    Division:
      type: object
      properties:
        id:
          type: string
          example: "some uuid"
        division:
          type: string
          example: "A / B / C / NA" 
    Stream:
      type: object
      properties:
        id:
          type: string
          example: "some uuid"
        stream:
          type: string
          example: "BSC / BBA / BAF / NA"
        specialisation:
          type: string
          example: "IT / CS / NA"
    Batch:
      type: object
      properties:
        id: 
          type: string
          example: " some uuid"
        year:
          $ref: '#/components/schemas/Year'
        stream:
          $ref: '#/components/schemas/Stream'
  requestBodies:
    Lecture:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Lecture'